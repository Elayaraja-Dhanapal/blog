<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-04T13:00:23+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Summary</title><link href="http://localhost:4000/blog/summary.html" rel="alternate" type="text/html" title="Summary" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/blog/summary</id><content type="html" xml:base="http://localhost:4000/blog/summary.html">&lt;p&gt;Automation capabilities empower to work more effectively to create enhanced and personalized customer experiences.Kubernetes makes it easier to configure, deploy, and manage containerized applications. Compatible with all types of projects small and large to deliver better end-to-end customer journeys with improved governing of content and processes.Manual installation of Openshift on Power can be cumbersome and may not always produce the desired results. At the same time it can be time consuming and cost ineffective.Automation for OpenShift on IBM Power Platform is an initiative to make deployment of Power servers on PowerVM or KVM in an automated way.  Both ocp4-upi-powervm and ocp4-upi-kvm re-uses the ocp4 helpernode ansible playbook to provide end-to-end automation for OCP 4.x deployment on Power servers. Aim is to simplify deployment of required services for OpenShift 4.x UPI (User Provisioned Infrastructure) based on the deployments on Power.&lt;/p&gt;</content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html">Automation capabilities empower to work more effectively to create enhanced and personalized customer experiences.Kubernetes makes it easier to configure, deploy, and manage containerized applications. Compatible with all types of projects small and large to deliver better end-to-end customer journeys with improved governing of content and processes.Manual installation of Openshift on Power can be cumbersome and may not always produce the desired results. At the same time it can be time consuming and cost ineffective.Automation for OpenShift on IBM Power Platform is an initiative to make deployment of Power servers on PowerVM or KVM in an automated way. Both ocp4-upi-powervm and ocp4-upi-kvm re-uses the ocp4 helpernode ansible playbook to provide end-to-end automation for OCP 4.x deployment on Power servers. Aim is to simplify deployment of required services for OpenShift 4.x UPI (User Provisioned Infrastructure) based on the deployments on Power.</summary></entry><entry><title type="html">Features</title><link href="http://localhost:4000/blog/features.html" rel="alternate" type="text/html" title="Features" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/blog/features</id><content type="html" xml:base="http://localhost:4000/blog/features.html">&lt;ol&gt;
  &lt;li&gt;The Automation project uses ansible playbooks for  installation of OCP on Power and other post install customizations.&lt;/li&gt;
  &lt;li&gt;The use of Playbooks in Ansible is also another reason for the major advantages of Ansible. Playbooks are Ansible configuration files, and the language for writing them is YAML.&lt;/li&gt;
  &lt;li&gt;The architecture of &lt;a href=&quot;https://www.ibm.com/us-en/marketplace/powervc&quot;&gt;PowerVC&lt;/a&gt; uses the OpenStack platform to provide virtualization and cloud management customized for Power Systems.  This includes an IBM Power-specific user interface, and IBM-specific OpenStack drivers for Power Systems management interfaces like the hardware management console (HMC), plus scheduling capabilities. Clients looking for a fully open virtualized infrastructure can use PowerVC to manage their PowerKVM on Power deployments as well.
    &lt;ul&gt;
      &lt;li&gt;Deployment of Power servers in the enterprise can be categorized into four types.&lt;/li&gt;
      &lt;li&gt;PowerVM based servers managed by HMC.&lt;/li&gt;
      &lt;li&gt;PowerVM based servers managed by PowerVC.&lt;/li&gt;
      &lt;li&gt;KVM based servers managed by libvirt.&lt;/li&gt;
      &lt;li&gt;Baremetal servers without any hypervisor (KVM or PowerVM)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html">The Automation project uses ansible playbooks for installation of OCP on Power and other post install customizations. The use of Playbooks in Ansible is also another reason for the major advantages of Ansible. Playbooks are Ansible configuration files, and the language for writing them is YAML. The architecture of PowerVC uses the OpenStack platform to provide virtualization and cloud management customized for Power Systems. This includes an IBM Power-specific user interface, and IBM-specific OpenStack drivers for Power Systems management interfaces like the hardware management console (HMC), plus scheduling capabilities. Clients looking for a fully open virtualized infrastructure can use PowerVC to manage their PowerKVM on Power deployments as well. Deployment of Power servers in the enterprise can be categorized into four types. PowerVM based servers managed by HMC. PowerVM based servers managed by PowerVC. KVM based servers managed by libvirt. Baremetal servers without any hypervisor (KVM or PowerVM)</summary></entry><entry><title type="html">Home</title><link href="http://localhost:4000/blog/" rel="alternate" type="text/html" title="Home" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/home</id><content type="html" xml:base="http://localhost:4000/blog/"></content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html"></summary></entry><entry><title type="html">Introduction</title><link href="http://localhost:4000/blog/introduction.html" rel="alternate" type="text/html" title="Introduction" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/blog/introduction</id><content type="html" xml:base="http://localhost:4000/blog/introduction.html">&lt;p&gt;Red Hat and IBM Power teams have been working together on OpenShift since 2018 with the initial release of OpenShift 3.11 on Power. Through this continuous collaboration and effort between IBM and Red Hat, improvements on Power have been made such as the support of IBM PowerVM with OpenShift to enable our Power Enterprise systems. OpenShift on IBM Power Systems takes advantage of the Hybrid Cloud Flexibility, as a result of it, OpenShift can be deployed on PowerVM or Red Hat KVM (development) on Power scale-out servers to exploit the 3.2x container density advantage per core of the POWER9 multi-threaded architecture. Automation for OpenShift on IBM Power Architecture can make things easier and much faster for the end user, making the entire process hasslefree allowing Power clients to exploit the innovative new capabilities.A deployment host is any virtual or physical host that is typically required for the installation of Red Hat OpenShift. The Red Hat OpenShift installation assumes that many, if not all the external services like DNS, load balancing, HTTP server, DHCP are already available in an existing data center and therefore there is no need to duplicate them on a node in the Red Hat OpenShift cluster. Master node, worker node and bootstrap can run on top of PowerVC, PowerVM, Red Hat Virtualization, KVM or run bare metal environments. You can manage trust configuration directly on each node or manage the files on a separate host by distributing them to the appropriate nodes using Ansible.
Ansible is an automation tool used to configure systems, deploy software, and perform rolling updates. Ansible includes support for container-native virtualization, and Ansible modules enable you to automate cluster management tasks such as template, persistent volume claim, and virtual machine operations. Ansible provides a way to automate container-native virtualization management, which you can also accomplish by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt; CLI tool or APIs. Ansible is unique because it allows you to integrate KubeVirt modules with other Ansible modules.
Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process. If Ansible modules are the tools in your workshop, playbooks are your instruction manuals, and your inventory of hosts are your raw material.
At a basic level, [playbooks][playbooks] can be used to manage configurations of and deployments to remote machines. At a more advanced level, they can sequence multi-tier rollouts involving rolling updates, and can delegate actions to other hosts, interacting with monitoring servers and load balancers along the way.
Playbooks are designed to be human-readable and are developed in a basic text language. There are multiple ways to organize playbooks and the files they include.
The Playbooks are used for installation of OCP on Power and other post install customizations
[Terraform][terraform] is an Open Source software that is developed by HashiCorp that enables predictable and consistent provisioning of IBM Cloud platform, classic infrastructure, and VPC infrastructure resources by using a high-level scripting language. Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Terraform can be used to automate IBM Cloud resource provisioning, rapidly build complex, multi-tier cloud environments, and enable Infrastructure as Code (IaC).
A lot of OpenShift 4 specific jargon is used throughout this doc, so please visit the [official documentation page][official documentation page] to get familiar with OpenShift 4.
[playbooks]: https://github.com/ocp-power-automation/ocp4-playbooks
[terraform]: https://www.terraform.io/docs/providers/index.html
[official documentation page]: https://docs.openshift.com/container-platform/latest&lt;/p&gt;</content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html">Red Hat and IBM Power teams have been working together on OpenShift since 2018 with the initial release of OpenShift 3.11 on Power. Through this continuous collaboration and effort between IBM and Red Hat, improvements on Power have been made such as the support of IBM PowerVM with OpenShift to enable our Power Enterprise systems. OpenShift on IBM Power Systems takes advantage of the Hybrid Cloud Flexibility, as a result of it, OpenShift can be deployed on PowerVM or Red Hat KVM (development) on Power scale-out servers to exploit the 3.2x container density advantage per core of the POWER9 multi-threaded architecture. Automation for OpenShift on IBM Power Architecture can make things easier and much faster for the end user, making the entire process hasslefree allowing Power clients to exploit the innovative new capabilities.A deployment host is any virtual or physical host that is typically required for the installation of Red Hat OpenShift. The Red Hat OpenShift installation assumes that many, if not all the external services like DNS, load balancing, HTTP server, DHCP are already available in an existing data center and therefore there is no need to duplicate them on a node in the Red Hat OpenShift cluster. Master node, worker node and bootstrap can run on top of PowerVC, PowerVM, Red Hat Virtualization, KVM or run bare metal environments. You can manage trust configuration directly on each node or manage the files on a separate host by distributing them to the appropriate nodes using Ansible. Ansible is an automation tool used to configure systems, deploy software, and perform rolling updates. Ansible includes support for container-native virtualization, and Ansible modules enable you to automate cluster management tasks such as template, persistent volume claim, and virtual machine operations. Ansible provides a way to automate container-native virtualization management, which you can also accomplish by using the oc CLI tool or APIs. Ansible is unique because it allows you to integrate KubeVirt modules with other Ansible modules. Playbooks are Ansible’s configuration, deployment, and orchestration language. They can describe a policy you want your remote systems to enforce, or a set of steps in a general IT process. If Ansible modules are the tools in your workshop, playbooks are your instruction manuals, and your inventory of hosts are your raw material. At a basic level, [playbooks][playbooks] can be used to manage configurations of and deployments to remote machines. At a more advanced level, they can sequence multi-tier rollouts involving rolling updates, and can delegate actions to other hosts, interacting with monitoring servers and load balancers along the way. Playbooks are designed to be human-readable and are developed in a basic text language. There are multiple ways to organize playbooks and the files they include. The Playbooks are used for installation of OCP on Power and other post install customizations [Terraform][terraform] is an Open Source software that is developed by HashiCorp that enables predictable and consistent provisioning of IBM Cloud platform, classic infrastructure, and VPC infrastructure resources by using a high-level scripting language. Terraform is used to create, manage, and update infrastructure resources such as physical machines, VMs, network switches, containers, and more. Terraform can be used to automate IBM Cloud resource provisioning, rapidly build complex, multi-tier cloud environments, and enable Infrastructure as Code (IaC). A lot of OpenShift 4 specific jargon is used throughout this doc, so please visit the [official documentation page][official documentation page] to get familiar with OpenShift 4. [playbooks]: https://github.com/ocp-power-automation/ocp4-playbooks [terraform]: https://www.terraform.io/docs/providers/index.html [official documentation page]: https://docs.openshift.com/container-platform/latest</summary></entry><entry><title type="html">Prerequisites</title><link href="http://localhost:4000/blog/prereq.html" rel="alternate" type="text/html" title="Prerequisites" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/blog/prereq</id><content type="html" xml:base="http://localhost:4000/blog/prereq.html">&lt;ul&gt;
  &lt;li&gt;Git: Please refer to the &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot;&gt;link&lt;/a&gt; for instructions on installing the latest Git.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://golang.org/doc/install&quot;&gt;Go&lt;/a&gt; 1.13 (to build the provider plugin)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-upi-kvm/blob/master/docs/prepare-images.md&quot;&gt;Preparing Images for Power&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;docker v17.03+, podman v1.2.0+, or buildah v1.7+&lt;/li&gt;
  &lt;li&gt;Access to a cluster based on Kubernetes v1.12.0+&lt;/li&gt;
  &lt;li&gt;Access to a container registry&lt;/li&gt;
  &lt;li&gt;Public internet connection for all the nodes to download the playbooks and images as part of the setup process.
VM configs for OpenShift nodes that will be deployed with RHCOS image.&lt;/li&gt;
  &lt;li&gt;Bootstrap, Master - 4 vCPUs, 16GB RAM, 120 GB Disk
This config is suitable for majority of the scenarios&lt;/li&gt;
  &lt;li&gt;Worker - 4 vCPUs, 16GB RAM, 120 GB Disk
Increase worker vCPUs, RAM and Disk based on application requirements
Following is the recommended VM config for the helper node that will be deployed with RHEL 8.0 (or later) image.&lt;/li&gt;
  &lt;li&gt;Helper node (bastion) - 2vCPUs, 16GB RAM, 200 GB Disk&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html">Git: Please refer to the link for instructions on installing the latest Git. Go 1.13 (to build the provider plugin) Preparing Images for Power docker v17.03+, podman v1.2.0+, or buildah v1.7+ Access to a cluster based on Kubernetes v1.12.0+ Access to a container registry Public internet connection for all the nodes to download the playbooks and images as part of the setup process. VM configs for OpenShift nodes that will be deployed with RHCOS image. Bootstrap, Master - 4 vCPUs, 16GB RAM, 120 GB Disk This config is suitable for majority of the scenarios Worker - 4 vCPUs, 16GB RAM, 120 GB Disk Increase worker vCPUs, RAM and Disk based on application requirements Following is the recommended VM config for the helper node that will be deployed with RHEL 8.0 (or later) image. Helper node (bastion) - 2vCPUs, 16GB RAM, 200 GB Disk</summary></entry><entry><title type="html">Steps</title><link href="http://localhost:4000/blog/steps.html" rel="alternate" type="text/html" title="Steps" /><published>2020-11-03T12:18:19+05:30</published><updated>2020-11-03T12:18:19+05:30</updated><id>http://localhost:4000/blog/steps</id><content type="html" xml:base="http://localhost:4000/blog/steps.html">&lt;p&gt;PowerVM, bare metal and KVM based Power Systems are supported with Red Hat OpenShift. Automation of Openshift on Power  helps to automate business operations with an integrated platform. OpenShift Container Platform (OCP) 4.x can be deployed on &lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-upi-powervm&quot;&gt;PowerVM LPARs using PowerVC&lt;/a&gt; or &lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-upi-kvm&quot;&gt;KVM VMs using libvirt&lt;/a&gt;. For OpenShift Container Platform (OCP) 4.x on PowerVM an important assumption is that PowerVC is used as the Infrastructure as a service (IaaS) layer for managing the PowerVM LPARs. You’ll need to  fulfill the &lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-upi-powervm#image-and-lpar-requirements&quot;&gt;Image and LPAR requirements&lt;/a&gt; by creating RedHat CoreOS (RHCOS) and RHEL 8.0 (or later) image in PowerVC . For RHCOS image creation, follow the steps mentioned in the following &lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-upi-powervm/blob/master/docs/coreos-image-creation.md&quot;&gt;doc&lt;/a&gt;. Similarly , &lt;a href=&quot;https://github.com/ocp-power-automation/ ocp4-upi-kvm#image-and-vm-requirements&quot;&gt;Image and VM requirements&lt;/a&gt; needs to be fulfilled to configure the images required for the automation on KVM. On PowerVM based systems such as the enterprise E/S/L systems, there is no host OS and CoreOS is the guest OS. On KVM based systems such as the AC922 and IC922, the host OS is Red Hat Enterprise Linux and CoreOS is the guest OS. CoreOS as the host OS is for the bare metal deployments.
&lt;img src=&quot;https://i.imgur.com/cIgLK7U.png&quot; alt=&quot;Image&quot; /&gt;
Standalone PowerVM, PowerVM LPARs and KVM VMs leverage the &lt;a href=&quot;https://github.com/RedHatOfficial/ocp4-helpernode&quot;&gt;ansible playbook&lt;/a&gt; to set up a helper node (bastion) for OCP deployment. &lt;a href=&quot;https://github.com/RedHatOfficial/ocp4-helpernode&quot;&gt;Helper Node&lt;/a&gt; is an “all-in-one” node that has all the infrastructure/services in order to install OpenShift 4. The helper node manages a number of services that are used to install, configure, and access an OpenShift cluster. After you &lt;a href=&quot;https://github.com/ocp-power-automation/ocp4-playbooks&quot;&gt;run the playbook&lt;/a&gt;, you’ll be ready to begin the installation process. For deploying OpenShift Container Platform (OCP) 4.x on PowerVM LPARs or on KVM VMs using libvirt, it is important to identify a remote client machine for running the automation.
Install the below required packages on the client machine.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Git: install the latest &lt;a href=&quot;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&quot;&gt;Git&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Terraform &amp;gt;= 0.13.0 for PowerVM and Terraform &amp;gt;= 0.12.2, &amp;lt; 0.13 for KVM VMs. Please refer to the instructions on &lt;a href=&quot;https://learn.hashicorp.com/terraform/getting-started/install.html&quot;&gt;installing Terraform&lt;/a&gt;. For validating the version run terraform version command after install.&lt;/li&gt;
  &lt;li&gt;Public internet connection for all the nodes to download the playbooks and images as part of the setup process.
Terraform is an open source “Infrastructure as Code” tool, created by HashiCorp. Terraform is Platform agnostic, that is , it can be used with any cloud services provider. It sets up an immutable infrastructure, which means that with each change to the environment, the current configuration automatically replaces to a new one that accounts for the modification, and the infrastructure is accounted for. To add to advantage, previous configurations can be retained as versions to enable rollbacks if desired.
Terraform modules are small, reusable Terraform configurations for multiple resources that are used together. Terraform modules provide a flexible way to automate complex resources with reusable and configurable constructs. Writing even a very simple Terraform file results in a module.
Running &lt;a href=&quot;https://github.com/ocp-power-automation/terraform-provider-ibm#using-the-provider&quot;&gt;Terraform with the IBM Cloud provider&lt;/a&gt; plugin on your system is quite simple.To support a multi-cloud approach, Terraform works with cloud providers. A cloud provider is responsible for understanding the resources that you can provision, their API, and the methods to expose these resources in the cloud. To provision resources in IBM Cloud, you must install the IBM Cloud Provider plug-in for Terraform. An implementation of generated Ansible modules using the &lt;a href=&quot;https://github.com/IBM-Cloud/terraform-provider-ibm&quot;&gt;IBM Cloud Terraform Provider&lt;/a&gt; is setting up VPC Virtual Server Instance or IBM Power Virtual Server in IBM Cloud.
&lt;a href=&quot;https://github.com/IBM-Cloud/terraform-provider-ibm/tree/master/examples/ansible/examples/simple-vm-power-vs&quot;&gt;IBM Power Virtual Server&lt;/a&gt; through IBM Cloud Ansible Module creates a Power Systems Virtual Server running AIX or IBMi. The server is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using the provided SSH key.Whereas VPC Virtual Server Instance through IBM Cloud Ansible Module creates a Virtual Server Instance (VSI) inside of a &lt;a href=&quot;https://github.com/ocp-power-automation/terraform-provider-ibm/tree/master/examples/ansible/examples/simple-vm-ssh&quot;&gt;Virtual Private Cloud&lt;/a&gt;. The VSI is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using an SSH key pair.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Elayaraja Dhanapal</name></author><category term="jekyll" /><category term="update" /><summary type="html">PowerVM, bare metal and KVM based Power Systems are supported with Red Hat OpenShift. Automation of Openshift on Power helps to automate business operations with an integrated platform. OpenShift Container Platform (OCP) 4.x can be deployed on PowerVM LPARs using PowerVC or KVM VMs using libvirt. For OpenShift Container Platform (OCP) 4.x on PowerVM an important assumption is that PowerVC is used as the Infrastructure as a service (IaaS) layer for managing the PowerVM LPARs. You’ll need to fulfill the Image and LPAR requirements by creating RedHat CoreOS (RHCOS) and RHEL 8.0 (or later) image in PowerVC . For RHCOS image creation, follow the steps mentioned in the following doc. Similarly , Image and VM requirements needs to be fulfilled to configure the images required for the automation on KVM. On PowerVM based systems such as the enterprise E/S/L systems, there is no host OS and CoreOS is the guest OS. On KVM based systems such as the AC922 and IC922, the host OS is Red Hat Enterprise Linux and CoreOS is the guest OS. CoreOS as the host OS is for the bare metal deployments. Standalone PowerVM, PowerVM LPARs and KVM VMs leverage the ansible playbook to set up a helper node (bastion) for OCP deployment. Helper Node is an “all-in-one” node that has all the infrastructure/services in order to install OpenShift 4. The helper node manages a number of services that are used to install, configure, and access an OpenShift cluster. After you run the playbook, you’ll be ready to begin the installation process. For deploying OpenShift Container Platform (OCP) 4.x on PowerVM LPARs or on KVM VMs using libvirt, it is important to identify a remote client machine for running the automation. Install the below required packages on the client machine. Git: install the latest Git. Terraform &amp;gt;= 0.13.0 for PowerVM and Terraform &amp;gt;= 0.12.2, &amp;lt; 0.13 for KVM VMs. Please refer to the instructions on installing Terraform. For validating the version run terraform version command after install. Public internet connection for all the nodes to download the playbooks and images as part of the setup process. Terraform is an open source “Infrastructure as Code” tool, created by HashiCorp. Terraform is Platform agnostic, that is , it can be used with any cloud services provider. It sets up an immutable infrastructure, which means that with each change to the environment, the current configuration automatically replaces to a new one that accounts for the modification, and the infrastructure is accounted for. To add to advantage, previous configurations can be retained as versions to enable rollbacks if desired. Terraform modules are small, reusable Terraform configurations for multiple resources that are used together. Terraform modules provide a flexible way to automate complex resources with reusable and configurable constructs. Writing even a very simple Terraform file results in a module. Running Terraform with the IBM Cloud provider plugin on your system is quite simple.To support a multi-cloud approach, Terraform works with cloud providers. A cloud provider is responsible for understanding the resources that you can provision, their API, and the methods to expose these resources in the cloud. To provision resources in IBM Cloud, you must install the IBM Cloud Provider plug-in for Terraform. An implementation of generated Ansible modules using the IBM Cloud Terraform Provider is setting up VPC Virtual Server Instance or IBM Power Virtual Server in IBM Cloud. IBM Power Virtual Server through IBM Cloud Ansible Module creates a Power Systems Virtual Server running AIX or IBMi. The server is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using the provided SSH key.Whereas VPC Virtual Server Instance through IBM Cloud Ansible Module creates a Virtual Server Instance (VSI) inside of a Virtual Private Cloud. The VSI is configured to allow incoming SSH connections through a publicly accessible IP address and authenticated using an SSH key pair.</summary></entry></feed>